scalar Date

input GraphQLPaginationInputSort {
    fieldName:String!
    sortDirection:SortDirection
}
enum SortDirection {
    ASCENDING,DESCENDING
}

interface IDEntity {
    id:ID!
}

directive @connection(
    for: String = "type"
) on FIELD_DEFINITION | ENUM_VALUE

type GraphQLPaginationPageInfo {
    totalElements:Int!
    totalPages:Int!
    number:Int!
    size:Int!
}

interface GraphQLPaginationResult {
    pageInfo:GraphQLPaginationPageInfo!
    result:[IDEntity!]!
}

input GraphQLPaginationInput {
    offsetPage:Int
    pageSize:Int
    sorts:[GraphQLPaginationInputSort]
}

input InputPerson{
    vorname: String!
    nachname: String!
    skill: String
    geburtsdatum:Date
}
type Person implements IDEntity{
    id: ID!
    vorname: String!
    nachname: String!
    skill: String
    geburtsdatum:Date
}

type PersonConnection implements GraphQLPaginationResult {
    pageInfo:GraphQLPaginationPageInfo!
    result:[Person!]!
}

# The Root Query for the application     findAllPerson(page:Int,size:Int):[Person]!
 type Query {
     findPersonlistBy(vorname:String,nachname:String,skill:String,geburtsdatum:Date,pagination: GraphQLPaginationInput):PersonConnection @connection(for: "Person")
}

# The Root Mutation for the application
type Mutation {
    savePerson(vorname:String,nachname:String, skill:String, geburtsdatum:Date):Person!
    deletePerson(id:Int):Boolean!
    updatePerson(id:Int,pr:InputPerson):Person!
}
